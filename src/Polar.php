<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar;



/**
 * Polar - Polar API: Polar HTTP and Webhooks API
 *
 * Read the docs at https://docs.polar.sh/api-reference
 */
class Polar
{
    /** SERVER_PRODUCTION - Production environment */
    public const SERVER_PRODUCTION = 'production';

    /** SERVER_SANDBOX - Sandbox environment */
    public const SERVER_SANDBOX = 'sandbox';

    public const SERVERS = [
        /** Production environment */
        Polar::SERVER_PRODUCTION => 'https://api.polar.sh',
        /** Sandbox environment */
        Polar::SERVER_SANDBOX => 'https://sandbox-api.polar.sh',
    ];

    public ExternalOrganizations $externalOrganizations;

    public Repositories $repositories;

    public Organizations $organizations;

    public Subscriptions $subscriptions;

    public Oauth2 $oauth2;

    public Benefits $benefits;

    public Products $products;

    public Orders $orders;

    public Refunds $refunds;

    public Checkouts $checkouts;

    public Files $files;

    public Metrics $metrics;

    public LicenseKeys $licenseKeys;

    public CheckoutLinks $checkoutLinks;

    public CustomFields $customFields;

    public Discounts $discounts;

    public Customers $customers;

    public CustomerPortal $customerPortal;

    public CustomerSessions $customerSessions;

    public Events $events;

    public Meters $meters;

    public CustomerMeters $customerMeters;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return PolarBuilder
     */
    public static function builder(): PolarBuilder
    {
        return new PolarBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->externalOrganizations = new ExternalOrganizations($this->sdkConfiguration);
        $this->repositories = new Repositories($this->sdkConfiguration);
        $this->organizations = new Organizations($this->sdkConfiguration);
        $this->subscriptions = new Subscriptions($this->sdkConfiguration);
        $this->oauth2 = new Oauth2($this->sdkConfiguration);
        $this->benefits = new Benefits($this->sdkConfiguration);
        $this->products = new Products($this->sdkConfiguration);
        $this->orders = new Orders($this->sdkConfiguration);
        $this->refunds = new Refunds($this->sdkConfiguration);
        $this->checkouts = new Checkouts($this->sdkConfiguration);
        $this->files = new Files($this->sdkConfiguration);
        $this->metrics = new Metrics($this->sdkConfiguration);
        $this->licenseKeys = new LicenseKeys($this->sdkConfiguration);
        $this->checkoutLinks = new CheckoutLinks($this->sdkConfiguration);
        $this->customFields = new CustomFields($this->sdkConfiguration);
        $this->discounts = new Discounts($this->sdkConfiguration);
        $this->customers = new Customers($this->sdkConfiguration);
        $this->customerPortal = new CustomerPortal($this->sdkConfiguration);
        $this->customerSessions = new CustomerSessions($this->sdkConfiguration);
        $this->events = new Events($this->sdkConfiguration);
        $this->meters = new Meters($this->sdkConfiguration);
        $this->customerMeters = new CustomerMeters($this->sdkConfiguration);
        $this->sdkConfiguration->client = $this->sdkConfiguration->initHooks($this->sdkConfiguration->client);

    }
}