<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


/** CheckoutUpdate - Update an existing checkout session using an access token. */
class CheckoutUpdate
{
    /**
     * Key-value object storing custom field values.
     *
     * @var ?array<string, string|int|bool|\DateTime|null> $customFieldData
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('custom_field_data')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|bool|\DateTime|null>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $customFieldData = null;

    /**
     * Key-value object allowing you to store additional information.
     *
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     *
     * @var ?array<string, string|int|float|bool> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|float|bool>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * ID of the product to checkout. Must be present in the checkout's product list.
     *
     * @var ?string $productId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('product_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $productId = null;

    /**
     * ID of the product price to checkout. Must correspond to a price present in the checkout's product list.
     *
     * @var ?string $productPriceId
     * @deprecated  field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('product_price_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $productPriceId = null;

    /**
     *
     * @var ?int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $amount = null;

    /**
     *
     * @var ?bool $isBusinessCustomer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('is_business_customer')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $isBusinessCustomer = null;

    /**
     *
     * @var ?string $customerName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerName = null;

    /**
     *
     * @var ?string $customerEmail
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_email')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerEmail = null;

    /**
     *
     * @var ?string $customerBillingName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_billing_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerBillingName = null;

    /**
     *
     * @var ?AddressInput $customerBillingAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_billing_address')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\AddressInput|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AddressInput $customerBillingAddress = null;

    /**
     *
     * @var ?string $customerTaxId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_tax_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerTaxId = null;

    /**
     * The interval unit for the trial period.
     *
     * @var ?TrialInterval $trialInterval
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('trial_interval')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\TrialInterval|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TrialInterval $trialInterval = null;

    /**
     * The number of interval units for the trial period.
     *
     * @var ?int $trialIntervalCount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('trial_interval_count')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $trialIntervalCount = null;

    /**
     * ID of the discount to apply to the checkout.
     *
     * @var ?string $discountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('discount_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $discountId = null;

    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     *
     * @var ?bool $allowDiscountCodes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('allow_discount_codes')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $allowDiscountCodes = null;

    /**
     * Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`.
     *
     * @var ?bool $requireBillingAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('require_billing_address')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $requireBillingAddress = null;

    /**
     *
     * @var ?string $customerIpAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_ip_address')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerIpAddress = null;

    /**
     * Key-value object allowing you to store additional information that'll be copied to the created customer.
     *
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     *
     * @var ?array<string, string|int|float|bool> $customerMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|float|bool>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $customerMetadata = null;

    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     *
     * @var ?string $successUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('success_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $successUrl = null;

    /**
     * If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
     *
     * @var ?string $embedOrigin
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('embed_origin')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $embedOrigin = null;

    /**
     * @param  ?array<string, string|int|bool|\DateTime|null>  $customFieldData
     * @param  ?array<string, string|int|float|bool>  $metadata
     * @param  ?string  $productId
     * @param  ?string  $productPriceId
     * @param  ?int  $amount
     * @param  ?bool  $isBusinessCustomer
     * @param  ?string  $customerName
     * @param  ?string  $customerEmail
     * @param  ?string  $customerBillingName
     * @param  ?AddressInput  $customerBillingAddress
     * @param  ?string  $customerTaxId
     * @param  ?TrialInterval  $trialInterval
     * @param  ?int  $trialIntervalCount
     * @param  ?string  $discountId
     * @param  ?bool  $allowDiscountCodes
     * @param  ?bool  $requireBillingAddress
     * @param  ?string  $customerIpAddress
     * @param  ?array<string, string|int|float|bool>  $customerMetadata
     * @param  ?string  $successUrl
     * @param  ?string  $embedOrigin
     * @phpstan-pure
     */
    public function __construct(?array $customFieldData = null, ?array $metadata = null, ?string $productId = null, ?string $productPriceId = null, ?int $amount = null, ?bool $isBusinessCustomer = null, ?string $customerName = null, ?string $customerEmail = null, ?string $customerBillingName = null, ?AddressInput $customerBillingAddress = null, ?string $customerTaxId = null, ?TrialInterval $trialInterval = null, ?int $trialIntervalCount = null, ?string $discountId = null, ?bool $allowDiscountCodes = null, ?bool $requireBillingAddress = null, ?string $customerIpAddress = null, ?array $customerMetadata = null, ?string $successUrl = null, ?string $embedOrigin = null)
    {
        $this->customFieldData = $customFieldData;
        $this->metadata = $metadata;
        $this->productId = $productId;
        $this->productPriceId = $productPriceId;
        $this->amount = $amount;
        $this->isBusinessCustomer = $isBusinessCustomer;
        $this->customerName = $customerName;
        $this->customerEmail = $customerEmail;
        $this->customerBillingName = $customerBillingName;
        $this->customerBillingAddress = $customerBillingAddress;
        $this->customerTaxId = $customerTaxId;
        $this->trialInterval = $trialInterval;
        $this->trialIntervalCount = $trialIntervalCount;
        $this->discountId = $discountId;
        $this->allowDiscountCodes = $allowDiscountCodes;
        $this->requireBillingAddress = $requireBillingAddress;
        $this->customerIpAddress = $customerIpAddress;
        $this->customerMetadata = $customerMetadata;
        $this->successUrl = $successUrl;
        $this->embedOrigin = $embedOrigin;
    }
}