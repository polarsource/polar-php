<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


/**
 * CheckoutCreate - Create a new checkout session from a list of products.
 *
 * Customers will be able to switch between those products.
 *
 * Metadata set on the checkout will be copied
 * to the resulting order and/or subscription.
 */
class CheckoutCreate
{
    /**
     * List of product IDs available to select at that checkout. The first one will be selected by default.
     *
     * @var array<string> $products
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('products')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>')]
    public array $products;

    /**
     * Key-value object allowing you to store additional information.
     *
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     *
     * @var ?array<string, string|int|float|bool> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|float|bool>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * Key-value object storing custom field values.
     *
     * @var ?array<string, string|int|bool|\DateTime|null> $customFieldData
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('custom_field_data')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|bool|\DateTime|null>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $customFieldData = null;

    /**
     * Key-value object allowing you to store additional information that'll be copied to the created customer.
     *
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     *
     * @var ?array<string, string|int|float|bool> $customerMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|float|bool>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $customerMetadata = null;

    /**
     * The interval unit for the trial period.
     *
     * @var ?TrialInterval $trialInterval
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('trial_interval')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\TrialInterval|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TrialInterval $trialInterval = null;

    /**
     * The number of interval units for the trial period.
     *
     * @var ?int $trialIntervalCount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('trial_interval_count')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $trialIntervalCount = null;

    /**
     * ID of the discount to apply to the checkout.
     *
     * @var ?string $discountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('discount_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $discountId = null;

    /**
     *
     * @var ?int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $amount = null;

    /**
     * Number of seats for seat-based pricing. Required for seat-based products.
     *
     * @var ?int $seats
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('seats')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $seats = null;

    /**
     * ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.
     *
     * @var ?string $customerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerId = null;

    /**
     * ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.
     *
     * @var ?string $externalCustomerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_customer_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalCustomerId = null;

    /**
     *
     * @var ?string $customerName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerName = null;

    /**
     *
     * @var ?string $customerEmail
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_email')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerEmail = null;

    /**
     *
     * @var ?string $customerIpAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_ip_address')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerIpAddress = null;

    /**
     *
     * @var ?string $customerBillingName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_billing_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerBillingName = null;

    /**
     *
     * @var ?AddressInput $customerBillingAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_billing_address')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\AddressInput|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AddressInput $customerBillingAddress = null;

    /**
     *
     * @var ?string $customerTaxId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_tax_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerTaxId = null;

    /**
     * ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
     *
     * @var ?string $subscriptionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('subscription_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $subscriptionId = null;

    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     *
     * @var ?string $successUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('success_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $successUrl = null;

    /**
     * When set, a back button will be shown in the checkout to return to this URL.
     *
     * @var ?string $returnUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('return_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $returnUrl = null;

    /**
     * If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
     *
     * @var ?string $embedOrigin
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('embed_origin')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $embedOrigin = null;

    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     *
     * @var ?bool $allowDiscountCodes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('allow_discount_codes')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $allowDiscountCodes = null;

    /**
     * Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`.
     *
     * @var ?bool $requireBillingAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('require_billing_address')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $requireBillingAddress = null;

    /**
     * Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name.
     *
     * @var ?bool $isBusinessCustomer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('is_business_customer')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $isBusinessCustomer = null;

    /**
     * @param  array<string>  $products
     * @param  ?array<string, string|int|float|bool>  $metadata
     * @param  ?array<string, string|int|bool|\DateTime|null>  $customFieldData
     * @param  ?bool  $allowDiscountCodes
     * @param  ?bool  $requireBillingAddress
     * @param  ?bool  $isBusinessCustomer
     * @param  ?array<string, string|int|float|bool>  $customerMetadata
     * @param  ?TrialInterval  $trialInterval
     * @param  ?int  $trialIntervalCount
     * @param  ?string  $discountId
     * @param  ?int  $amount
     * @param  ?int  $seats
     * @param  ?string  $customerId
     * @param  ?string  $externalCustomerId
     * @param  ?string  $customerName
     * @param  ?string  $customerEmail
     * @param  ?string  $customerIpAddress
     * @param  ?string  $customerBillingName
     * @param  ?AddressInput  $customerBillingAddress
     * @param  ?string  $customerTaxId
     * @param  ?string  $subscriptionId
     * @param  ?string  $successUrl
     * @param  ?string  $returnUrl
     * @param  ?string  $embedOrigin
     * @phpstan-pure
     */
    public function __construct(array $products, ?array $metadata = null, ?array $customFieldData = null, ?array $customerMetadata = null, ?TrialInterval $trialInterval = null, ?int $trialIntervalCount = null, ?string $discountId = null, ?int $amount = null, ?int $seats = null, ?string $customerId = null, ?string $externalCustomerId = null, ?string $customerName = null, ?string $customerEmail = null, ?string $customerIpAddress = null, ?string $customerBillingName = null, ?AddressInput $customerBillingAddress = null, ?string $customerTaxId = null, ?string $subscriptionId = null, ?string $successUrl = null, ?string $returnUrl = null, ?string $embedOrigin = null, ?bool $allowDiscountCodes = true, ?bool $requireBillingAddress = false, ?bool $isBusinessCustomer = false)
    {
        $this->products = $products;
        $this->metadata = $metadata;
        $this->customFieldData = $customFieldData;
        $this->customerMetadata = $customerMetadata;
        $this->trialInterval = $trialInterval;
        $this->trialIntervalCount = $trialIntervalCount;
        $this->discountId = $discountId;
        $this->amount = $amount;
        $this->seats = $seats;
        $this->customerId = $customerId;
        $this->externalCustomerId = $externalCustomerId;
        $this->customerName = $customerName;
        $this->customerEmail = $customerEmail;
        $this->customerIpAddress = $customerIpAddress;
        $this->customerBillingName = $customerBillingName;
        $this->customerBillingAddress = $customerBillingAddress;
        $this->customerTaxId = $customerTaxId;
        $this->subscriptionId = $subscriptionId;
        $this->successUrl = $successUrl;
        $this->returnUrl = $returnUrl;
        $this->embedOrigin = $embedOrigin;
        $this->allowDiscountCodes = $allowDiscountCodes;
        $this->requireBillingAddress = $requireBillingAddress;
        $this->isBusinessCustomer = $isBusinessCustomer;
    }
}