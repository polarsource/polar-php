<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


class Meter
{
    /**
     * $metadata
     *
     * @var array<string, string|int|float|bool> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|float|bool>')]
    public array $metadata;

    /**
     * Creation timestamp of the object.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * The ID of the object.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * The name of the meter. Will be shown on customer's invoices and usage.
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     *
     * @var Filter $filter
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('filter')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Filter')]
    public Filter $filter;

    /**
     * The aggregation to apply on the filtered events to calculate the meter.
     *
     * @var CountAggregation|PropertyAggregation|UniqueAggregation $aggregation
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('aggregation')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\CountAggregation|\Polar\Models\Components\PropertyAggregation|\Polar\Models\Components\UniqueAggregation')]
    #[\Speakeasy\Serializer\Annotation\UnionDiscriminator(field: 'func', map: ['CountAggregation' => '\Polar\Models\Components\CountAggregation', 'PropertyAggregation' => '\Polar\Models\Components\PropertyAggregation', 'UniqueAggregation' => '\Polar\Models\Components\UniqueAggregation'])]
    public CountAggregation|PropertyAggregation|UniqueAggregation $aggregation;

    /**
     * The ID of the organization owning the meter.
     *
     * @var string $organizationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('organization_id')]
    public string $organizationId;

    /**
     * Last modification timestamp of the object.
     *
     * @var ?\DateTime $modifiedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('modified_at')]
    public ?\DateTime $modifiedAt;

    /**
     * Whether the meter is archived and the time it was archived.
     *
     * @var ?\DateTime $archivedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('archived_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $archivedAt = null;

    /**
     * @param  array<string, string|int|float|bool>  $metadata
     * @param  \DateTime  $createdAt
     * @param  string  $id
     * @param  string  $name
     * @param  Filter  $filter
     * @param  CountAggregation|PropertyAggregation|UniqueAggregation  $aggregation
     * @param  string  $organizationId
     * @param  ?\DateTime  $modifiedAt
     * @param  ?\DateTime  $archivedAt
     * @phpstan-pure
     */
    public function __construct(array $metadata, \DateTime $createdAt, string $id, string $name, Filter $filter, CountAggregation|PropertyAggregation|UniqueAggregation $aggregation, string $organizationId, ?\DateTime $modifiedAt = null, ?\DateTime $archivedAt = null)
    {
        $this->metadata = $metadata;
        $this->createdAt = $createdAt;
        $this->id = $id;
        $this->name = $name;
        $this->filter = $filter;
        $this->aggregation = $aggregation;
        $this->organizationId = $organizationId;
        $this->modifiedAt = $modifiedAt;
        $this->archivedAt = $archivedAt;
    }
}