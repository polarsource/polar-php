<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


class MeterCreate
{
    /**
     * The name of the meter. Will be shown on customer's invoices and usage.
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     *
     * @var Filter $filter
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('filter')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Filter')]
    public Filter $filter;

    /**
     * The aggregation to apply on the filtered events to calculate the meter.
     *
     * @var CountAggregation|PropertyAggregation|UniqueAggregation $aggregation
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('aggregation')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\CountAggregation|\Polar\Models\Components\PropertyAggregation|\Polar\Models\Components\UniqueAggregation')]
    #[\Speakeasy\Serializer\Annotation\UnionDiscriminator(field: 'func', map: ['CountAggregation' => '\Polar\Models\Components\CountAggregation', 'PropertyAggregation' => '\Polar\Models\Components\PropertyAggregation', 'UniqueAggregation' => '\Polar\Models\Components\UniqueAggregation'])]
    public CountAggregation|PropertyAggregation|UniqueAggregation $aggregation;

    /**
     * Key-value object allowing you to store additional information.
     *
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     *
     * @var ?array<string, string|int|float|bool> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|float|bool>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * The ID of the organization owning the meter. **Required unless you use an organization token.**
     *
     * @var ?string $organizationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('organization_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $organizationId = null;

    /**
     * @param  string  $name
     * @param  Filter  $filter
     * @param  CountAggregation|PropertyAggregation|UniqueAggregation  $aggregation
     * @param  ?array<string, string|int|float|bool>  $metadata
     * @param  ?string  $organizationId
     * @phpstan-pure
     */
    public function __construct(string $name, Filter $filter, CountAggregation|PropertyAggregation|UniqueAggregation $aggregation, ?array $metadata = null, ?string $organizationId = null)
    {
        $this->name = $name;
        $this->filter = $filter;
        $this->aggregation = $aggregation;
        $this->metadata = $metadata;
        $this->organizationId = $organizationId;
    }
}