<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


class BenefitGrantMeterCreditWebhook
{
    /**
     * Creation timestamp of the object.
     *
     * @var \DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    public \DateTime $createdAt;

    /**
     * The ID of the grant.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * Whether the benefit is granted.
     *
     * @var bool $isGranted
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('is_granted')]
    public bool $isGranted;

    /**
     * Whether the benefit is revoked.
     *
     * @var bool $isRevoked
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('is_revoked')]
    public bool $isRevoked;

    /**
     * The ID of the customer concerned by this grant.
     *
     * @var string $customerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_id')]
    public string $customerId;

    /**
     * The ID of the benefit concerned by this grant.
     *
     * @var string $benefitId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('benefit_id')]
    public string $benefitId;

    /**
     * A customer in an organization.
     *
     * @var Customer $customer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Customer')]
    public Customer $customer;

    /**
     * A benefit of type `meter_unit`.
     *
     *
     * Use it to grant a number of units on a specific meter.
     *
     * @var BenefitMeterCredit $benefit
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('benefit')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\BenefitMeterCredit')]
    public BenefitMeterCredit $benefit;

    /**
     *
     * @var BenefitGrantMeterCreditProperties $properties
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('properties')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\BenefitGrantMeterCreditProperties')]
    public BenefitGrantMeterCreditProperties $properties;

    /**
     * Last modification timestamp of the object.
     *
     * @var ?\DateTime $modifiedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('modified_at')]
    public ?\DateTime $modifiedAt;

    /**
     * The ID of the subscription that granted this benefit.
     *
     * @var ?string $subscriptionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('subscription_id')]
    public ?string $subscriptionId;

    /**
     * The ID of the order that granted this benefit.
     *
     * @var ?string $orderId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('order_id')]
    public ?string $orderId;

    /**
     * The timestamp when the benefit was granted. If `None`, the benefit is not granted.
     *
     * @var ?\DateTime $grantedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('granted_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $grantedAt = null;

    /**
     * The timestamp when the benefit was revoked. If `None`, the benefit is not revoked.
     *
     * @var ?\DateTime $revokedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('revoked_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $revokedAt = null;

    /**
     * The error information if the benefit grant failed with an unrecoverable error.
     *
     * @var ?BenefitGrantError $error
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('error')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\BenefitGrantError|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?BenefitGrantError $error = null;

    /**
     *
     * @var ?BenefitGrantMeterCreditProperties $previousProperties
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('previous_properties')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\BenefitGrantMeterCreditProperties|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?BenefitGrantMeterCreditProperties $previousProperties = null;

    /**
     * @param  \DateTime  $createdAt
     * @param  string  $id
     * @param  bool  $isGranted
     * @param  bool  $isRevoked
     * @param  string  $customerId
     * @param  string  $benefitId
     * @param  Customer  $customer
     * @param  BenefitMeterCredit  $benefit
     * @param  BenefitGrantMeterCreditProperties  $properties
     * @param  ?\DateTime  $modifiedAt
     * @param  ?string  $subscriptionId
     * @param  ?string  $orderId
     * @param  ?\DateTime  $grantedAt
     * @param  ?\DateTime  $revokedAt
     * @param  ?BenefitGrantError  $error
     * @param  ?BenefitGrantMeterCreditProperties  $previousProperties
     * @phpstan-pure
     */
    public function __construct(\DateTime $createdAt, string $id, bool $isGranted, bool $isRevoked, string $customerId, string $benefitId, Customer $customer, BenefitMeterCredit $benefit, BenefitGrantMeterCreditProperties $properties, ?\DateTime $modifiedAt = null, ?string $subscriptionId = null, ?string $orderId = null, ?\DateTime $grantedAt = null, ?\DateTime $revokedAt = null, ?BenefitGrantError $error = null, ?BenefitGrantMeterCreditProperties $previousProperties = null)
    {
        $this->createdAt = $createdAt;
        $this->id = $id;
        $this->isGranted = $isGranted;
        $this->isRevoked = $isRevoked;
        $this->customerId = $customerId;
        $this->benefitId = $benefitId;
        $this->customer = $customer;
        $this->benefit = $benefit;
        $this->properties = $properties;
        $this->modifiedAt = $modifiedAt;
        $this->subscriptionId = $subscriptionId;
        $this->orderId = $orderId;
        $this->grantedAt = $grantedAt;
        $this->revokedAt = $revokedAt;
        $this->error = $error;
        $this->previousProperties = $previousProperties;
    }
}