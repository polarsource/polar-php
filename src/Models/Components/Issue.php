<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


class Issue
{
    /**
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     *
     * @var Platforms $platform
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('platform')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Platforms')]
    public Platforms $platform;

    /**
     * GitHub #number
     *
     * @var int $number
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('number')]
    public int $number;

    /**
     * GitHub issue title
     *
     * @var string $title
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('title')]
    public string $title;

    /**
     *
     * @var State $state
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('state')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\State')]
    public State $state;

    /**
     *
     * @var \DateTime $issueCreatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issue_created_at')]
    public \DateTime $issueCreatedAt;

    /**
     * If a maintainer needs to mark this issue as solved
     *
     * @var bool $needsConfirmationSolved
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('needs_confirmation_solved')]
    public bool $needsConfirmationSolved;

    /**
     *
     * @var Funding $funding
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('funding')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Funding')]
    public Funding $funding;

    /**
     *
     * @var Repository $repository
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('repository')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Repository')]
    public Repository $repository;

    /**
     * If this issue currently has the Polar badge SVG embedded
     *
     * @var bool $pledgeBadgeCurrentlyEmbedded
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('pledge_badge_currently_embedded')]
    public bool $pledgeBadgeCurrentlyEmbedded;

    /**
     * $labels
     *
     * @var ?array<Label> $labels
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('labels')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Polar\Models\Components\Label>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $labels = null;

    /**
     * GitHub issue body
     *
     * @var ?string $body
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('body')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $body = null;

    /**
     * Number of GitHub comments made on the issue
     *
     * @var ?int $comments
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('comments')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $comments = null;

    /**
     * GitHub author
     *
     * @var ?Author $author
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('author')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Author|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Author $author = null;

    /**
     * GitHub assignees
     *
     * @var ?array<Assignee> $assignees
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('assignees')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Polar\Models\Components\Assignee>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $assignees = null;

    /**
     * GitHub reactions
     *
     * @var ?Reactions $reactions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('reactions')]
    #[\Speakeasy\Serializer\Annotation\Type('\Polar\Models\Components\Reactions|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Reactions $reactions = null;

    /**
     *
     * @var ?\DateTime $issueClosedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issue_closed_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $issueClosedAt = null;

    /**
     *
     * @var ?\DateTime $issueModifiedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('issue_modified_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $issueModifiedAt = null;

    /**
     * If this issue has been marked as confirmed solved through Polar
     *
     * @var ?\DateTime $confirmedSolvedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('confirmed_solved_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $confirmedSolvedAt = null;

    /**
     * Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive).
     *
     * @var ?int $upfrontSplitToContributors
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('upfront_split_to_contributors')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $upfrontSplitToContributors = null;

    /**
     * Optional custom badge SVG promotional content
     *
     * @var ?string $badgeCustomContent
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('badge_custom_content')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $badgeCustomContent = null;

    /**
     * @param  string  $id
     * @param  Platforms  $platform
     * @param  int  $number
     * @param  string  $title
     * @param  State  $state
     * @param  \DateTime  $issueCreatedAt
     * @param  bool  $needsConfirmationSolved
     * @param  Funding  $funding
     * @param  Repository  $repository
     * @param  bool  $pledgeBadgeCurrentlyEmbedded
     * @param  ?array<Label>  $labels
     * @param  ?string  $body
     * @param  ?int  $comments
     * @param  ?Author  $author
     * @param  ?array<Assignee>  $assignees
     * @param  ?Reactions  $reactions
     * @param  ?\DateTime  $issueClosedAt
     * @param  ?\DateTime  $issueModifiedAt
     * @param  ?\DateTime  $confirmedSolvedAt
     * @param  ?int  $upfrontSplitToContributors
     * @param  ?string  $badgeCustomContent
     * @phpstan-pure
     */
    public function __construct(string $id, Platforms $platform, int $number, string $title, State $state, \DateTime $issueCreatedAt, bool $needsConfirmationSolved, Funding $funding, Repository $repository, bool $pledgeBadgeCurrentlyEmbedded, ?array $labels = null, ?string $body = null, ?int $comments = null, ?Author $author = null, ?array $assignees = null, ?Reactions $reactions = null, ?\DateTime $issueClosedAt = null, ?\DateTime $issueModifiedAt = null, ?\DateTime $confirmedSolvedAt = null, ?int $upfrontSplitToContributors = null, ?string $badgeCustomContent = null)
    {
        $this->id = $id;
        $this->platform = $platform;
        $this->number = $number;
        $this->title = $title;
        $this->state = $state;
        $this->issueCreatedAt = $issueCreatedAt;
        $this->needsConfirmationSolved = $needsConfirmationSolved;
        $this->funding = $funding;
        $this->repository = $repository;
        $this->pledgeBadgeCurrentlyEmbedded = $pledgeBadgeCurrentlyEmbedded;
        $this->labels = $labels;
        $this->body = $body;
        $this->comments = $comments;
        $this->author = $author;
        $this->assignees = $assignees;
        $this->reactions = $reactions;
        $this->issueClosedAt = $issueClosedAt;
        $this->issueModifiedAt = $issueModifiedAt;
        $this->confirmedSolvedAt = $confirmedSolvedAt;
        $this->upfrontSplitToContributors = $upfrontSplitToContributors;
        $this->badgeCustomContent = $badgeCustomContent;
    }
}