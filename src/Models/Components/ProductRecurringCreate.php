<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


/** ProductRecurringCreate - Schema to create a recurring product, i.e. a subscription. */
class ProductRecurringCreate
{
    /**
     * The name of the product.
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * List of available prices for this product.
     *
     * @var array<ProductPriceRecurringFixedCreate>|array<ProductPriceRecurringFreeCreate> $prices
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('prices')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Polar\Models\Components\ProductPriceRecurringFixedCreate>|array<\Polar\Models\Components\ProductPriceRecurringFreeCreate>')]
    public array $prices;

    /**
     * Key-value object allowing you to store additional information.
     *
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     *
     * @var ?array<string, string|int|bool> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, string|int|bool>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * List of custom fields to attach.
     *
     * @var ?array<AttachedCustomFieldCreate> $attachedCustomFields
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('attached_custom_fields')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Polar\Models\Components\AttachedCustomFieldCreate>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $attachedCustomFields = null;

    /**
     * The description of the product.
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
     *
     * @var ?array<string> $medias
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('medias')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $medias = null;

    /**
     * The ID of the organization owning the product. **Required unless you use an organization token.**
     *
     * @var ?string $organizationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('organization_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $organizationId = null;

    /**
     * @param  string  $name
     * @param  array<ProductPriceRecurringFixedCreate>|array<ProductPriceRecurringFreeCreate>  $prices
     * @param  ?array<string, string|int|bool>  $metadata
     * @param  ?array<AttachedCustomFieldCreate>  $attachedCustomFields
     * @param  ?string  $description
     * @param  ?array<string>  $medias
     * @param  ?string  $organizationId
     * @phpstan-pure
     */
    public function __construct(string $name, array $prices, ?array $metadata = null, ?array $attachedCustomFields = null, ?string $description = null, ?array $medias = null, ?string $organizationId = null)
    {
        $this->name = $name;
        $this->prices = $prices;
        $this->metadata = $metadata;
        $this->attachedCustomFields = $attachedCustomFields;
        $this->description = $description;
        $this->medias = $medias;
        $this->organizationId = $organizationId;
    }
}