<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Components;


/** ProductPriceMeteredUnitCreate - Schema to create a metered price with a fixed unit price. */
class ProductPriceMeteredUnitCreate
{
    /**
     * The ID of the meter associated to the price.
     *
     * @var string $meterId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('meter_id')]
    public string $meterId;

    /**
     * The price per unit in cents. Supports up to 12 decimal places.
     *
     * @var float|string $unitAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('unit_amount')]
    #[\Speakeasy\Serializer\Annotation\Type('float|string')]
    public float|string $unitAmount;

    /**
     * Optional maximum amount in cents that can be charged, regardless of the number of units consumed.
     *
     * @var ?int $capAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('cap_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $capAmount = null;

    /**
     *
     * @var string $amountType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount_type')]
    public string $amountType;

    /**
     * The currency. Currently, only `usd` is supported.
     *
     * @var ?string $priceCurrency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('price_currency')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $priceCurrency = null;

    /**
     * @param  string  $amountType
     * @param  string  $meterId
     * @param  float|string  $unitAmount
     * @param  ?string  $priceCurrency
     * @param  ?int  $capAmount
     * @phpstan-pure
     */
    public function __construct(string $meterId, float|string $unitAmount, ?int $capAmount = null, string $amountType = 'metered_unit', ?string $priceCurrency = 'usd')
    {
        $this->meterId = $meterId;
        $this->unitAmount = $unitAmount;
        $this->capAmount = $capAmount;
        $this->amountType = $amountType;
        $this->priceCurrency = $priceCurrency;
    }
}