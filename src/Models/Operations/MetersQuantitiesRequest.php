<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Polar\Models\Operations;

use Polar\Models\Components;
use Polar\Utils\SpeakeasyMetadata;
class MetersQuantitiesRequest
{
    /**
     * The meter ID.
     *
     * @var string $id
     */
    #[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=id')]
    public string $id;

    /**
     * Start timestamp.
     *
     * @var \DateTime $startTimestamp
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=start_timestamp,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public \DateTime $startTimestamp;

    /**
     * End timestamp.
     *
     * @var \DateTime $endTimestamp
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=end_timestamp,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public \DateTime $endTimestamp;

    /**
     * Interval between two timestamps.
     *
     * @var Components\TimeInterval $interval
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval')]
    public Components\TimeInterval $interval;

    /**
     * Filter by customer ID.
     *
     * @var string|array<string>|null $customerId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=customer_id')]
    public string|array|null $customerId = null;

    /**
     * Filter by external customer ID.
     *
     * @var string|array<string>|null $externalCustomerId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=external_customer_id')]
    public string|array|null $externalCustomerId = null;

    /**
     * If set, will first compute the quantities per customer before aggregating them using the given function. If not set, the quantities will be aggregated across all events.
     *
     * @var ?Components\AggregationFunction $customerAggregationFunction
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=customer_aggregation_function')]
    public ?Components\AggregationFunction $customerAggregationFunction = null;

    /**
     * Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`.
     *
     * @var ?array<string, string|int|bool|array<string>|array<int>|array<bool>> $metadata
     */
    #[SpeakeasyMetadata('queryParam:style=deepObject,explode=true,name=metadata')]
    public ?array $metadata = null;

    /**
     * @param  string  $id
     * @param  \DateTime  $startTimestamp
     * @param  \DateTime  $endTimestamp
     * @param  Components\TimeInterval  $interval
     * @param  string|array<string>|null  $customerId
     * @param  string|array<string>|null  $externalCustomerId
     * @param  ?Components\AggregationFunction  $customerAggregationFunction
     * @param  ?array<string, string|int|bool|array<string>|array<int>|array<bool>>  $metadata
     * @phpstan-pure
     */
    public function __construct(string $id, \DateTime $startTimestamp, \DateTime $endTimestamp, Components\TimeInterval $interval, string|array|null $customerId = null, string|array|null $externalCustomerId = null, ?Components\AggregationFunction $customerAggregationFunction = null, ?array $metadata = null)
    {
        $this->id = $id;
        $this->startTimestamp = $startTimestamp;
        $this->endTimestamp = $endTimestamp;
        $this->interval = $interval;
        $this->customerId = $customerId;
        $this->externalCustomerId = $externalCustomerId;
        $this->customerAggregationFunction = $customerAggregationFunction;
        $this->metadata = $metadata;
    }
}